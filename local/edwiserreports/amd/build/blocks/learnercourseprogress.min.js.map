{"version":3,"sources":["blocks/learnercourseprogress.js"],"names":["define","$","ApexCharts","Common","CFG","chart","filter","course","barChartDefault","series","type","height","toolbar","show","tools","download","reset","zoom","enabled","tooltip","enabledOnSeries","undefined","shared","followCursor","intersect","inverseOrder","fillSeriesColor","onDatasetHover","highlightDataSeries","marker","items","display","fixed","position","offsetX","offsetY","y","title","grid","borderColor","dataLabels","xaxis","categories","labels","hideOverlappingLabels","trim","rotate","minHeight","maxHeight","legend","horizontalAlign","itemMargin","horizontal","vertical","noData","text","M","util","get_string","colors","getColorTheme","donutChartDefault","formatter","seriesName","opts","w","globals","seriesIndex","SELECTOR","PANEL","COURSE","GRAPH","PROMISE","GET_COURSEPROGRESS","ajax","url","requestUrl","requestType","dataType","requestDataType","data","action","secret","local_edwiserreports","lang","attr","JSON","stringify","loadGraph","loader","done","response","Object","assign","yaxis","max","progress","name","length","find","custom","_ref","dataPointIndex","value","label","config","single","plural","color","concat","graph","destroy","get","render","setTimeout","hide","renderGraph","fail","exception","init","invalidUser","select2","on","courseid","parseInt","this","val","setInterval","newPosition","width","updateOptions"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Block service call and rendering defined in this file.\n *\n * @package     local_edwiserreports\n * @author      Yogesh Shirsath\n * @copyright   2022 wisdmlabs <support@wisdmlabs.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine('local_edwiserreports/blocks/learnercourseprogress', [\n    'jquery',\n    'local_edwiserreports/vendor/apexcharts',\n    'local_edwiserreports/common',\n    'local_edwiserreports/defaultconfig',\n    'local_edwiserreports/select2'\n], function(\n    $,\n    ApexCharts,\n    Common,\n    CFG\n) {\n    /**\n     * Charts list.\n     */\n    var chart = null;\n\n    /**\n     * Filter for ajax.\n     */\n    var filter = {\n        course: 0\n    };\n\n    /**\n     * Bar chart default config.\n     */\n    const barChartDefault = {\n        series: [],\n        chart: {\n            type: 'bar',\n            height: 350,\n            toolbar: {\n                show: false,\n                tools: {\n                    download: false,\n                    reset: '<i class=\"fa fa-refresh\"></i>'\n                }\n            },\n            zoom: {\n                enabled: false\n            }\n        },\n        tooltip: {\n            enabled: true,\n            enabledOnSeries: undefined,\n            shared: true,\n            followCursor: false,\n            intersect: false,\n            inverseOrder: false,\n            fillSeriesColor: false,\n            onDatasetHover: {\n                highlightDataSeries: false,\n            },\n            marker: {\n                show: true\n            },\n            items: {\n                display: 'flex'\n            },\n            fixed: {\n                enabled: false,\n                position: 'topRight',\n                offsetX: 0,\n                offsetY: 0,\n            },\n            y: {\n                title: {}\n            }\n        },\n        grid: {\n            borderColor: '#e7e7e7'\n        },\n        dataLabels: {\n            enabled: false\n        },\n        xaxis: {\n            categories: null,\n            labels: {\n                hideOverlappingLabels: true,\n                trim: true,\n                rotate: 300,\n                minHeight: 100,\n                maxHeight: 120,\n            }\n        },\n        // xaxis: {\n        //     categories: null,\n        // },\n        legend: {\n            position: 'top',\n            horizontalAlign: 'left',\n            offsetY: '-20',\n            itemMargin: {\n                horizontal: 10,\n                vertical: 0\n            },\n        },\n        noData: {\n            text: M.util.get_string('nographdata', 'local_edwiserreports')\n        },\n        colors: [CFG.getColorTheme()[2]]\n    };\n\n    let position = 'right';\n\n    /**\n     * Donut chart default config.\n     */\n    const donutChartDefault = {\n        chart: {\n            type: 'donut',\n            height: 350\n        },\n        legend: {\n            position: position,\n            formatter: function(seriesName, opts) {\n                return [seriesName + \": \" + opts.w.globals.series[opts.seriesIndex]]\n            }\n        },\n        dataLabels: {\n            enabled: false\n        },\n        noData: {\n            text: M.util.get_string('nographdata', 'local_edwiserreports')\n        },\n        colors: CFG.getColorTheme()\n    };\n\n    /**\n     * Selectors list.\n     */\n    var SELECTOR = {\n        PANEL: '#learnercourseprogressblock',\n        COURSE: '#learnercourseprogress-course-select',\n        GRAPH: '#apex-chart-learnercourseprogress-block'\n    };\n\n    /**\n     * All promises.\n     */\n    var PROMISE = {\n        /**\n         * Get course progress using filters.\n         * @param {Object} filter Filter data\n         * @returns {PROMISE}\n         */\n        GET_COURSEPROGRESS: function(filter) {\n            return $.ajax({\n                url: CFG.requestUrl,\n                type: CFG.requestType,\n                dataType: CFG.requestDataType,\n                data: {\n                    action: 'get_learnercourseprogress_graph_data_ajax',\n                    secret: M.local_edwiserreports.secret,\n                    lang: $('html').attr('lang'),\n                    data: JSON.stringify({\n                        filter: filter\n                    })\n                },\n            });\n        }\n    }\n\n    /**\n     * Load graph\n     */\n    function loadGraph() {\n        let data;\n        Common.loader.show(SELECTOR.PANEL);\n\n        /**\n         * Render graph.\n         * @param {DOM} graph Graph element\n         * @param {Object} data Graph data\n         */\n        function renderGraph(graph, data) {\n            if (chart !== null) {\n                chart.destroy();\n            }\n            chart = new ApexCharts(graph.get(0), data);\n            chart.render();\n            setTimeout(function() {\n                Common.loader.hide(SELECTOR.PANEL);\n            }, 1000);\n        }\n\n        PROMISE.GET_COURSEPROGRESS(filter)\n            .done(function(response) {\n                if (filter.course == 0) {\n                    data = Object.assign({}, barChartDefault);\n                    data.yaxis = {\n                        max: 100,\n                        labels: {\n                            formatter: (progress) => {\n                                return progress + '%';\n                            }\n                        }\n                    };\n                    data.xaxis.categories = response.labels;\n                    data.series = [{\n                        name: M.util.get_string('courseprogress', 'local_edwiserreports'),\n                        data: response.progress,\n                    }];\n                    data.chart.toolbar.show = response.labels.length > 30;\n                    data.chart.zoom.enabled = response.labels.length > 30;\n                    data.tooltip.y.title.formatter = (title) => {\n                        return M.util.get_string('progress', 'local_edwiserreports') + ': ';\n                    };\n                    $(SELECTOR.PANEL).find('.panel-body').attr('data-charttype', 'bar');\n                } else {\n                    data = Object.assign({}, donutChartDefault);\n                    data.labels = response.labels;\n                    data.series = response.progress;\n                    data.tooltip = {\n                        custom: function({ series, seriesIndex, dataPointIndex, w }) {\n                            let value = series[seriesIndex];\n                            let label = w.config.labels[seriesIndex];\n                            let tooltip = value < 2 ? response.tooltip.single : response.tooltip.plural;\n                            let color = w.config.colors[seriesIndex];\n                            return `<div class=\"custom-donut-tooltip\" style=\"color: ${color};\">\n                                    <span style=\"font-weight: 500;\"> ${label}:</span>\n                                    <span style=\"font-weight: 700;\"> ${value} ${tooltip}</span>\n                                </div>`;\n                        }\n                    }\n                    $(SELECTOR.PANEL).find('.panel-body').attr('data-charttype', 'donut');\n                }\n                renderGraph($(SELECTOR.PANEL).find(SELECTOR.GRAPH), data);\n            }).fail(function(exception) {\n                Common.loader.hide(SELECTOR.PANEL);\n            });\n    }\n\n    /**\n     * Initialize event listeners.\n     */\n    function initEvents() {\n\n        // Course selector listener.\n        $('body').on('change', `${SELECTOR.PANEL} ${SELECTOR.COURSE}`, function() {\n            let courseid = parseInt($(this).val());\n            filter.course = courseid;\n\n            // Load graph data.\n            loadGraph();\n        });\n\n        // Handling legend position based on width.\n        setInterval(function() {\n            if (chart === null) {\n                return;\n            }\n            let width = $(SELECTOR.PANEL).find(SELECTOR.GRAPH).width();\n            let newPosition = width >= 400 ? 'right' : 'bottom';\n            if (newPosition == position) {\n                return;\n            }\n            position = newPosition;\n            chart.updateOptions({\n                legend: {\n                    position: position\n                }\n            })\n        }, 1000);\n\n    }\n\n    /**\n     * Initialize\n     * @param {function} invalidUser Callback function\n     */\n    function init(invalidUser) {\n        if ($(SELECTOR.PANEL).length == 0) {\n            return;\n        }\n        $(SELECTOR.PANEL).find('.singleselect').select2();\n        initEvents();\n\n        loadGraph();\n    }\n    return {\n        init: init\n    };\n});\n"],"file":"learnercourseprogress.min.js"}
